.. _compass-performance-insights:

======================
Data Model Suggestions
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

|compass| provides suggestions to improve your schema and data modeling
practices. Following these suggestions can improve your schema design
and application performance. 

Use Cases
---------

|compass-short|' data model suggestions are best followed early in your
application development process. Starting your application with good
data modeling practices helps prevent schema and performance issues as
your application grows.

While |compass-short| can suggest data model improvements at any stage
of development, it can be difficult to make schema modifications in
large-scale schemas that are used in production.

Before you implement a data model suggestion, ensure that the suggestion
makes sense for your application. For example, if |compass-short|
suggests creating an index, make sure that index supports queries that
are run frequently.

Behavior
--------

Data model suggestions are enabled automatically.

The suggestions made by |compass-short| are generic, and do not use
properties specific to your schema such as database or collection names.

|compass-short| suggests schema improvements in the following scenarios:

.. list-table::
   :header-rows: 1
   :widths: 10 10

   * - Scenario
     - Suggested Improvement
   
   * - You run a query or aggregation without an index.
     - Add an index to support the operation.

   * - You run a pipeline that uses a :pipeline:`$lookup` stage.
     - Embed related data to avoid the need for a ``$lookup`` operation.

   * - You run a :query:`$text` or :query:`$regex` query.
     - If possible, use :atlas:`Atlas Search </atlas-search>` to improve
       performance for text search queries.

   * - Your database contains too many collections.
     - Reduce the number of collections.

   * - Your documents contain an array field with too many elements.
     - Avoid unbounded arrays.

   * - The data size of individual documents is too large.
     - Break up large documents into separate collections.

   * - Your collection contains too many indexes.
     - Review your indexes and remove any that are unnecessary.

Learn More
----------

- To learn more about data modeling in MongoDB, see
  :ref:`manual-data-modeling-intro`.

- To learn how to create effective queries for your application, see
  :manual:`Indexing Strategies </applications/indexes>`.
