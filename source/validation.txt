.. _validation:

====================================
Set Validation Rules for Your Schema
====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _validation-tab:

Validation Tab
--------------

The :guilabel:`Validation` tab allows you to manage
:manual:`schema validation rules </core/document-validation>`
for a collection.

Schema validation ensures that all documents in a
collection follow a defined set of rules, such as conforming to a
specific shape or only allowing a specified range of values in fields.

.. figure:: /images/compass/validation-view.png
  :figwidth: 720px

.. _update-validation:
.. _create-validation-rules:

Validation Rules
----------------

*Updated in version 1.18.*

The validation editor supports :manual:`JSON Schema validation
</core/schema-validation/#json-schema>`, and validation with query
expressions using :manual:`query operators
</reference/operator/query>`. As you edit your validation,
|compass-short| updates in real-time to display a document from your
collection that passes the validation and a document that fails.

JSON Schema Validation
~~~~~~~~~~~~~~~~~~~~~~

To specify JSON Schema validation, use the
:manual:`$jsonSchema </reference/operator/query/jsonSchema>`
operator.

.. code-block:: json

   {
      $jsonSchema: {
         required: ['customer'], // the customer field is required
         properties: {
         purchaseMethod: {
            enum: ['In Store','Online'],
            description: "can only be either 'In Store' or 'Online'" 
         }
         }
      }
   }

The :manual:`$jsonSchema </reference/operator/query/jsonSchema>`
operator supports various keywords to specify validation rules. For
example:

- The ``required`` array defines required fields in your document.

- The ``properties`` object defines rules for specific document
   fields.

Consider the following example validation:

.. code-block:: json

   {
      $jsonSchema: {
         bsonType: "object",
         required: [ "name", "year", "major", "gpa", "address.city", "address.street" ],
         properties: {
            name: {
               bsonType: "string",
               description: "must be a string"
            },
            year: {
               bsonType: "int",
               minimum: 2017,
               maximum: 3017,
               exclusiveMaximum: false,
               description: "must be an integer in [ 2017, 3017 ]"
            },
            major: {
               bsonType: "string",
               enum: [ "Math", "English", "Computer Science", "History", null ],
               description: "can only be one of the enum values"
            },
            gpa: {
               bsonType: [ "double" ],
               minimum: 0,
               description: "must be a double"
            }
         }
      }
   }

This validation specifies:

- The list of :manual:`required
  </reference/operator/query/jsonSchema/#available-keywords>`
  fields.

- The :manual:`bsonType
  </reference/operator/query/jsonSchema/#available-keywords>` for
  all fields.

- The :manual:`minimum
  </reference/operator/query/jsonSchema/#available-keywords>`
  and :manual:`maximum </reference/operator/query/jsonSchema/#available-keywords>` values for the ``year`` field.

- The acceptable values for the  ``major`` field, using
  :manual:`enum
  </reference/operator/query/jsonSchema/#available-keywords>` .

- The :manual:`minimum
  </reference/operator/query/jsonSchema/#available-keywords>`
  value for the ``gpa`` field.

For all available ``$jsonSchema`` keywords, refer to the
:manual:`$jsonSchema </reference/operator/query/jsonSchema>` page in
the MongoDB manual.

Validation using Query Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also specify validation using
:manual:`query operators </reference/operator/query>`, with the
exception of the following query operators: :query:`$near`,
:query:`$nearSphere`, :query:`$text`, and :query:`$where`.

.. code-block:: json

   { 
      $or: [
         { phone: { $type: "string" } },
         { email: { $regex: /@mongodb\.com$/ } },
         { status: { $in: [ "Unknown", "Incomplete" ] } }
      ]
   }

Using this validation, *one* of the following must be true:

- The ``phone`` field must be BSON type string,

- The ``email`` field must match the
   :manual:`regex </reference/operator/query/regex/>`
   ``/@mongodb\.com$/``, or

- The ``status`` field must be either ``Unknown`` or ``Incomplete``.

.. _validation-actions-levels:

Validation Actions and Levels
-----------------------------

At the top, specify a :guilabel:`Validation Action` and
:guilabel:`Validation Level`:

- The validation action determines whether to ``warn`` but accept
  invalid documents, or ``error`` and reject invalid documents.

- The validation level determines how strictly MongoDB applies
  validation rules to existing documents.

  - ``Strict`` validation applies your rules to all document inserts
    and updates.

  - ``Moderate`` validation only applies your rules to new documents
    and existing valid documents. Existing invalid documents are not
    affected.

For details on validation actions and levels, see
:manual:`Specify Validation Rules
</core/schema-validation/#specify-validation-rules>` in the MongoDB
manual.

.. seealso::

   - :manual:`Schema Validation </core/schema-validation/>`

Limitations
-----------

The :guilabel:`Validation` tab is not available: 

- In :guilabel:`Compass Community Edition`. 

- If you are connected to a :atlas:`Data Lake </data-lake>`.

In :guilabel:`MongoDB Compass Readonly Edition`, you can
only view validation rules. Creating and editing validation rules
is not permitted.
