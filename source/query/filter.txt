.. _query-bar-filter:
.. _query-bar:
.. _compass-query-bar:

===============
Query Your Data
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can type MongoDB filter documents into the query bar to display only
documents which match the specified criteria. To learn more about
querying documents, see :manual:`Query Documents
</tutorial/query-documents/>` in the MongoDB manual.

Set Query Filter
----------------

#. In the :guilabel:`Filter` field, enter a filter document. You can use
   all of the MongoDB :manual:`query operators
   </reference/operator/query/>` except the :query:`$text` and
   :query:`$expr` operators.

   .. example::

      The following filter only returns documents which have a ``Country``
      value of ``Brazil``:
      
      .. code-block:: json
      
         { Country: "Brazil" }

#. .. include:: /includes/run-query.rst

   .. figure:: /images/querybar/query-filter-success.png
      :figwidth: 600px
      :lightbox:

.. note::

   .. include:: /includes/extracts/query-bar-results.rst

Supported Data Types in the Query Bar
-------------------------------------

The Compass :guilabel:`Filter` supports using the
:binary:`~bin.mongo` shell mode representation of the MongoDB
Extended JSON :manual:`BSON data types </reference/mongodb-extended-json#bson-data-types-and-associated-representations>`.

.. example::

   The following filter returns documents where
   ``start_date`` is greater than than the BSON ``Date``
   ``2017-05-01``:

   .. code-block:: javascript

      { "start_date": {$gt: new Date('2017-05-01')} }

   By specifying the ``Date`` type in both ``start_date`` and the
   ``$gt`` comparison operator, Compass performs the ``greater
   than`` comparison chronologically, returning documents with
   ``start_date`` later than ``2017-05-01``.

   Without the ``Date`` type specification, Compass compares the
   ``start_dates`` as strings
   `lexicographically <https://en.wikipedia.org/wiki/Lexicographical_order>`_,
   instead of comparing the values chronologically.


Clear the Query
---------------

.. include:: /includes/clear-query.rst

How Does the Compass Query Compare to MongoDB and SQL Queries?
--------------------------------------------------------------

:expression:`$filter` corresponds to the ``WHERE`` clause in a
|sql| ``SELECT`` statement.

.. example::

   You have 3,235 articles. You would like to see all articles
   that Joe Bloggs wrote.

   Compass Filter Option
      .. code-block:: javascript

         { author : { $eq : "Joe Bloggs" } }

   MongoDB Aggregation
      .. code-block:: javascript

         db.article.aggregate(
           { $filter : { author : { $eq : "Joe Bloggs" } } }
         );

   SQL
      .. code-block:: sql

         SELECT * FROM article
         WHERE author = "Joe Bloggs";

Examples
--------

.. class:: example

   The following examples use the JSON documents below as sample data. 
   To import this sample data to your MongoDB deployment with |compass|:

   1. Copy the array of documents below by clicking :guilabel:`Copy`.

   .. code-block:: JSON

      [
         {
            "_id":{"$oid":"5a9427648b0beebeb69579cc"},
            "name":"Andrea Le",
            "email":"andrea_le@fakegmail.com",
            "age":34,
            "scores":[85, 95, 75],
            "dateCreated":{"$date":{"$numberLong":"1332804016000"}}
         },
         {
            "_id":{"$oid":"5a9427648b0beebeb69579cf"},
            "name":"Greg Powell",
            "email":"greg_powell@fakegmail.com",
            "age":52,
            "scores":[65, 75, 80],
            "dateCreated":{"$date":{"$numberLong":"539915376000"}}
         }
      ]

   2. In |compass-short|, use the left navigation panel to select the 
      database and the collection you want to import the data to.
   
   #. Click the :guilabel:`Documents` tab.
   
   #. Click :guilabel:`Add Data` and select :guilabel:`Insert Document`.

   #. Ensure that :guilabel:`View` is set to JSON, or ``{}``, and paste 
      the copied JSON documents in the field.

   #. Click :guilabel:`Insert`.

.. note::

   If you do not have a MonogDB deployment or if you would like to 
   query a large sample data set, see
   :atlas:`Sample Data for Atlas Clusters</sample-data/>` for 
   instructions on creating a free-tier cluster with sample data. Note 
   that the examples below are intended to filter the sample JSON 
   documents provided on this page and may not properly filter another 
   sample data set.

Filter for a Match
~~~~~~~~~~~~~~~~~~
.. example::
   
   The following :ref:`query filter <query-bar-filter>` uses the 
   :manual:`$eq operator </reference/operator/query/eq/>` to find all 
   documents where ``name`` is "Andrea Le" .

   .. code-block:: shell

      { name: { $eq: "Andrea Le" } }

   The query returns the following document because the ``name`` field 
   value in the document is an exact match.

   .. code-block:: JSON
      :copyable: false

      {
         "_id":ObjectId("5a9427648b0beebeb69579cc"),
         "name":"Andrea Le",
         "email":"andrea_le@fakegmail.com",
         "age":34,
         "scores":[85, 95, 75],
         "dateCreated":2012-03-26T23:20:16.000+00:00
      }

Filter by Comparison
~~~~~~~~~~~~~~~~~~~~
.. example::
   
   The following :ref:`query filter <query-bar-filter>` uses the 
   :manual:`$gte operator </reference/operator/query/gte/>` to find all 
   documents where ``age`` is greater than or equal to ``40``.

   .. code-block:: shell

      { age: { $gte: 40 } }

   The query returns the following document because the value of the 
   ``age`` field in the document is greater than ``40``.

   .. code-block:: JSON
      :copyable: false

      {
         "_id":ObjectId("5a9427648b0beebeb69579cf"),
         "name":"Greg Powell",
         "email":"greg_powell@fakegmail.com",
         "age":52,
         "scores":[65, 75, 80],
         "dateCreated":1987-02-10T00:29:36.000+00:00
      }

Filter by Date
~~~~~~~~~~~~~~
.. example::
   
   The following :ref:`query filter <query-bar-filter>` uses the 
   :manual:`$gt operator </reference/operator/query/gt/>` and 
   :manual:`Date() method </reference/method/Date/>` to find all 
   documents where the ``dateCreated`` field value is later than June 
   22nd, 2000 at 12:30 PM.

   .. code-block:: shell

      { dateCreated: { $gt: Date('2000-06-22T12:30:00.000+00:00') } }

   The query returns the following document because the value of the 
   ``dateCreated`` field is after June 22, 2000 at 12:30 PM.

   .. code-block:: JSON
      :copyable: false

      {
         "_id":ObjectId("5a9427648b0beebeb69579cc"),
         "name":"Andrea Le",
         "email":"andrea_le@fakegmail.com",
         "age":34,
         "scores":[85, 95, 75],
         "dateCreated":2012-03-26T23:20:16.000+00:00
      }

Filter by Elements in an Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. example::
   
   The following :ref:`query filter <query-bar-filter>` uses the
   :manual:`$elemMatch operator </reference/operator/query/elemMatch/>` 
   to find all documents where at least one value in the ``scores`` 
   array is greater than 80 and less than ``90`` 

   .. code-block:: shell

     { scores: { $elemMatch: { $gt: 80, $lt: 90 } } }

   The query returns the following document because one of the values 
   in the scores array is ``85``, which matches the ``$elemMatch`` 
   criteria.

   .. code-block:: JSON
      :copyable: false

      {
         "_id":ObjectId("5a9427648b0beebeb69579cc"),
         "name":"Andrea Le",
         "email":"andrea_le@fakegmail.com",
         "age":34,
         "scores":[85, 95, 75],
         "dateCreated":2012-03-26T23:20:16.000+00:00
      }

For more query examples, see 
:manual:`Query Documents </tutorial/query-documents/>` 
in the MongoDB manual.

.. class:: hidden

   .. toctree::
      :titlesonly:

      /query/project
      Sort Returned Documents </query/sort>
      /query/maxtimems
      /query/collation
      Skip Through Documents </query/skip>
      Limit Number of Returned Documents </query/limit>
      /query-plan
      /export-query-to-language
      /query/queries
