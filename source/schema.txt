.. _schema-tab:

========================
Analyze Your Data Schema
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

*Not Available in Compass Community Edition*

Overview
--------

The :guilabel:`Schema` tab provides an overview of the data type
and shape of the fields in a particular collection. Databases
and collections are visible in the left-side navigation.

The overview is based on :ref:`sampling <sampling>`
the documents in the collection. The schema overview may include
additional data about the contents of the fields, such as the
minimum and maximum values of dates and integers, the frequency of
occurrence of particular values, and the cardinality of the data.

MongoDB has a
:manual:`flexible schema model </core/data-modeling-introduction/>`,
which means that some fields may
contain different types of data from one document to the next.

.. example::
   A field named ``address`` may contain strings and integers in some documents, objects in others, or some combination of all three.

In the case of heterogenous fields, the :guilabel:`Schema` tab shows a
breakdown of the various data types contained within the field with the
percentage of each data type represented.

.. example::

   The :guilabel:`Schema` tab shows size information about the
   ``test.restaurants`` collection at the top, including the total
   number of documents in the collection, the average document size,
   and the total disk space occupied by the collection.

   The following fields are shown with details:

   - The ``_id`` field is an
     :manual:`ObjectId </reference/bson-types/index.html#objectid>`.
     Each ObjectId contains a timestamp, so Compass displays the range
     of creation times for the sampled documents.

   - The ``address`` field contains four nested fields. You
     can expand the field panel to see analyses of each of the nested
     fields.

   - The ``borough`` field contains a string indicating the borough in
     which the restaurant is located. The cardinality is low enough
     that Compass can provide a graded bar of the field contents, with
     the most-frequently occurring string on the left.

   - The ``categories`` field contains arrays of strings. The analysis
     shows the minimum, maximum, and average array lengths.

   .. figure:: /images/compass/collection-schema.png
      :figwidth: 750px

Query Bar
---------

.. note::

   .. include:: /includes/extracts/query-bar-results.rst

Using the :ref:`query bar <compass-query-bar>` in the :guilabel:`Schema` tab,
you can create a query filter to limit your result set. Click the
:guilabel:`Options` button to specify query options, such as the
particular fields to display and the number of results to return.

.. figure:: /images/compass/query-bar-schema-view.png
   :figwidth: 730px

.. tip::

   In the :guilabel:`Schema` tab, you can also use the :ref:`build-query` to
   enter a query into the query bar.

Field Descriptions
------------------

For each field, Compass displays summary information about the data
type or types the field contains and the range of values. Depending
on the data type and the level of cardinality, Compass displays
histograms, graded bars, geographical maps, and sample data to provide
a sense of the shape and scope of the data contained in each field.

Field with a Single Data Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Below is an example of the data type summary for a field called
``last_login`` which contains data of type ``date``.

.. figure:: /images/compass/field-example.png
   :figwidth: 330px

Field with Multiple Data Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For fields that contain multiple data types,
Compass displays a percentage breakdown of
the various data types across documents. In the example below,
the chart shows the contents of a field called ``phone_no`` in which
81% of documents are of type ``string``, and the remaining 19% are of
type ``number``.

.. figure:: /images/compass/field-percentage-breakdown.png
   :figwidth: 330px

Missing Field
~~~~~~~~~~~~~

If a collection contains documents in which not all fields contain
a value, the missing values display as ``undefined``. In the example
below, the field ``age`` has no recorded value in 40% of the sampled
documents.

.. figure:: /images/compass/field-sparsity.png
   :figwidth: 330px

Strings
~~~~~~~

Strings can appear in three different ways. If there are
entirely unique strings in a field, Compass shows a random
selection of string values from the specified field. Click
the circular refresh icon to see
a new set of randomly selected values from the field.

.. figure:: /images/compass/string-sample.png
   :figwidth: 755px

If there are only a few different string values,
Compass shows the strings in a single graded bar which
shows the percentage of the population of the string values.

.. figure:: /images/compass/string-sample2.png
   :figwidth: 742px

If there are multiple string values with some duplicates,
Compass shows a histogram indicating the frequency of
each string found within the field.

.. figure:: /images/compass/string-sample3.png
   :figwidth: 734px

.. note::

   Move the mouse over each bar to display a tooltip which shows the
   value of the string.

Numbers
~~~~~~~

Numbers are similar to strings in their representation.
Unique numbers are shown in the following manner:

.. figure:: /images/compass/number-sample.png
   :figwidth: 764px

Duplicate numbers are shown in a histogram that indicates their
frequency:

.. figure:: /images/compass/number-sample2.png
   :figwidth: 762px

Dates and ObjectIDs
~~~~~~~~~~~~~~~~~~~

Fields that represent dates (and fields that contain the ObjectID
data type, which includes a timestamp) are shown across multiple
bar charts. The two charts on the top row represent the day of the
week and time of day of the timestamp value.

The single chart on the bottom shows the first and last timestamp
value, and the vertical lines represent the distribution of the
timestamp across the range of first to last.

.. figure:: /images/compass/date-sample.png
   :figwidth: 720px

Embedded Documents and Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fields that contain a sub-document or an array are displayed with
a small triangle next to them and a visual representation of the
data contained within the sub-document or array.

.. figure:: /images/compass/embedded-document-sample.png
   :figwidth: 662px

Click on the triangle to expand the field and view the embedded
documents:

.. figure:: /images/compass/embedded-document-sample2.png
   :figwidth: 748px

GeoJSON and ``[latitude,longitude]`` Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fields that contain GeoJSON data or ``[latitude,longitude]`` arrays are
displayed with interactive maps. For more information on interacting
with location data in |compass-short|, see :ref:`analyze-location-data`.

.. figure:: /images/compass/geo-visualization.png
   :figwidth: 816px

.. include:: /includes/fact-isolated-ver-third-party-mapping.rst

View Charts of Mixed Types
~~~~~~~~~~~~~~~~~~~~~~~~~~

If a field has mixed types, you can view different charts of each type
by clicking on the ``type`` field. In the example below, the ``age``
field shows the values that are strings:

.. figure:: /images/compass/mixed-sample.png
   :figwidth: 574px

Clicking on the ``number`` type causes the chart to show its numeric
data:

.. figure:: /images/compass/mixed-sample2.png
   :figwidth: 576px

.. _build-query:

Query Builder
-------------

In the :guilabel:`Schema` tab, you can type the filter manually into
the query bar or generate the filter with the Compass query builder.
The query builder allows you to select data elements from one or more
fields in your schema and construct a query matching the selected
elements.

.. tip::

   You can compose the initial query filter by using the clickable query
   builder and then manually edit the generated filter to your exact
   requirements.

The following procedure describes the steps involved in
building a complex query with the query bar.

.. include:: /includes/steps/create-query-via-builder.rst

.. _analyze-location-data:

Analyze Location Data
---------------------

In the :guilabel:`Schema` tab, you can use interactive maps to filter
and analyze location data. If your field contains
:manual:`GeoJSON data </reference/geojson/>` or
``[latitude,longitude]`` arrays, the :guilabel:`Schema` tab displays
a map containing the points from the field. The data type
for location fields is ``coordinates``.

.. figure:: /images/compass/location-data-example.png
   :figwidth: 575px
   :alt: Image showing example field with location data

Apply a Location Filter
~~~~~~~~~~~~~~~~~~~~~~~

You can apply a filter to the map to only analyze a specific
range of points. To define a location filter:

1. Click the :guilabel:`Circle` button at the top-right
   of the map.
   
#. Click and drag on the map to draw a circle containing the area of
   the map you want to analyze.

#. Repeat this process as desired to include additional areas of
   the map in the schema analysis.

.. figure:: /images/compass/location-data-filter.png
   :figwidth: 575px
   :alt: Image showing map with filter circles drawn

The query bar updates as you draw location filters to show
the exact coordinates used in the
:manual:`$geoWithin </reference/operator/query/geoWithin/>` query
applied to the schema analysis.

If you specify multiple location filters, the query becomes
an :manual:`$or </reference/operator/query/or/>` query
with multiple ``$geoWithin`` operators.

Edit a Location Filter
~~~~~~~~~~~~~~~~~~~~~~

To move or resize a location filter, click :icon-fa5:`edit` on the
right side of the map. You will enter the filter editing mode, which
looks like this:

.. figure:: /images/compass/location-data-filter-edit.png
   :figwidth: 575px
   :alt: Image showing map filter editing

To move a filter
  Click and drag the square in the center of the circle.

To resize a filter
  Click and drag the square at the edge of the circle.

After modifying your filters, click :guilabel:`Save`.

Delete a Location Filter
~~~~~~~~~~~~~~~~~~~~~~~~

To delete a location filter from the map:

1. Click :icon-fa5:`trash-alt` on the right side of the map.

#. Either click:

   - A location filter to delete that filter.

   - :guilabel:`Clear All` to delete all location filters.

#. Click :guilabel:`Save`.

.. |query-build-ref| replace:: :ref:`build-query`

.. |query-build-type| replace:: :ref:`build-query`

Export Your Schema
------------------

You can export your schema after analyzing it. This is useful for 
sharing your schema and comparing schemas across collections.

If you have not already done so, analyze your schema:

1. Select your desired collection and click the :guilabel:`Schema` tab.

#. Click :guilabel:`Analyze Schema`.

.. note::
   When |compass-short| analyzes your schema, it samples a random 
   subset of documents from your collection. To learn more about 
   sampling, see :ref:`Sampling <sampling>`.

Once your schema has been analyzed, export your schema:

1. In the top menu bar, click :guilabel:`Collection`.

#. From the dropdown, click :guilabel:`Share Schema as JSON`.

.. figure:: /images/compass/share-schema-json.png
   :alt: Image showing Collection dropdown

Your schema is copied to your clipboard as a |json| object.

Schema Object Properties
~~~~~~~~~~~~~~~~~~~~~~~~

Schema objects have properties ``count`` and ``fields``:

- ``count`` is an integer that represents the number of documents 
  :ref:`sampled <sampling>` from the collection to generate the schema.

- ``fields`` is an array of ``n`` metadata objects that represent each 
  field in the documents analyzed during sampling. Each element in the 
  ``fields`` array contains:

.. list-table::
  :header-rows: 1
  :widths: 25 35 40

  * - Field name
    - Data type
    - Description

  * - ``name``
    - String
    - Name of ``fields[n]``, e.g. ``_id``.

  * - ``path``
    - String
    - Path to ``fields[n]`` within a document.
    
  * - ``count``
    - Integer
    - The number of documents that ``fields[n]`` appears on.

  * - ``types``
    - Array
    - List of ``n`` metadata objects for each data type that 
      appears in ``fields[n]``.

  * - ``types[n].name``
    - String
    - Data type of ``types[n]``.
  
  * - ``types[n].bsonType``
    - String
    - |bson| type of ``types[n]``.

  * - ``types[n].path``
    - String
    - Path to ``name`` of ``fields[n]`` within a document.

  * - ``types[n].count``
    - Integer
    - Number of times ``types[n]`` appears in ``fields[n]``.
  
  * - ``types[n].values``
    - Array
    - List of the actual sampled values that 
      appear in ``fields[n]`` and match ``types[n]``.

  * - ``types[n].total_count``
    - Integer
    - Number of items nested in ``field[n]``. 0 when 
      ``fields[n]`` is not a nested value.
  
  * - ``types[n].probability``
    - Number
    - Probability that the value of ``field[n]`` is ``types[n]`` in a 
      random document.

  * - ``types[n].unique``
    - Integer
    - Number of unique values of ``types[n]`` that appear in 
      ``fields[n]``.

  * - ``types[n].has_duplicates``
    - Boolean
    - ``true`` if a single value of ``types[n]`` appears multiple times 
      in ``fields[n]``. Otherwise ``false``.

  * - ``types[n].lengths``
    - Array
    - If ``types[n]`` is an array, an array of integers representing 
      the lengths of arrays found in ``fields[n]``. Not present for 
      other data types.

  * - ``types[n].average_length``
    - Number
    - If ``types[n]`` is an array, the average length of arrays in 
      ``fields[n]`` across sampled documents. Not present for 
      other data types.

  * - ``total_count``
    - Integer
    - Number of documents sampled from the collection.

  * - ``type``
    - String or Array
    - String or array of strings representing possible types for 
      ``fields[n]``.

  * - ``has_duplicates``
    - Boolean
    - ``true`` if a single value appears multiple times in 
      ``fields[n]``. Otherwise ``false``.

  * - ``probability``
    - Number
    - Probability that a random document has ``fields[n]``.

Example Schema
~~~~~~~~~~~~~~

The following example uses a collection of 3 documents, each 
with a ``sport`` field and unique information about that sport:

.. code-block:: json
   :linenos:
   :copyable: true

   [
     {
       "_id":{"$oid":"5e8359ba7782b98ba98c16fd"},
       "sport":"Baseball",
       "equipment":["bat","baseball","glove","helmet"]
     },
     {
       "_id":{"$oid":"5e835a727782b98ba98c16fe"},
       "sport":"Football",
       "variants":{
           "us":"Soccer",
           "eu":"Football"
       }
     },
     {
       "_id":{"$oid":"5e835ade7782b98ba98c16ff"},
       "sport":"Cricket",
       "origin":"England"
     }
   ]

You can import the above example to |compass| to experiment with schema 
outputs. To import the example collection into |compass|:

1. :guilabel:`Copy` the JSON documents above.

#. In |compass|, select a collection or create a new collection to 
   import the copied documents to. The :guilabel:`Documents` tab 
   displays.

#. Click :guilabel:`Add Data`.

#. Select :guilabel:`Insert Document` from the dropdown.

#. In the JSON view of the dialog, paste the copied documents and click 
   :guilabel:`Insert`.

The example above outputs the following schema:
   
.. code-block:: json
   :linenos:
   :copyable: false
         
   {
     "fields": [
       {
         "name": "_id",
         "path": "_id",
         "count": 3,
         "types": [
           {
             "name": "ObjectID",
             "bsonType": "ObjectID",
             "path": "_id",
             "count": 3,
             "values": [
               "5e8359ba7782b98ba98c16fd",
               "5e835a727782b98ba98c16fe",
               "5e835ade7782b98ba98c16ff"
             ],
             "total_count": 0,
             "probability": 1,
             "unique": 3,
             "has_duplicates": false
           }
         ],
         "total_count": 3,
         "type": "ObjectID",
         "has_duplicates": false,
         "probability": 1
       },
       {
         "name": "equipment",
         "path": "equipment",
         "count": 1,
         "types": [
           {
             "name": "Undefined",
             "type": "Undefined",
             "path": "equipment",
             "count": 2,
             "total_count": 0,
             "probability": 0.6666666666666666,
             "unique": 1,
             "has_duplicates": true
           },
           {
             "name": "Array",
             "bsonType": "Array",
             "path": "equipment",
             "count": 1,
             "types": [
               {
                 "name": "String",
                 "bsonType": "String",
                 "path": "equipment",
                 "count": 4,
                 "values": [
                   "bat",
                   "baseball",
                   "glove",
                   "helmet"
                 ],
                 "total_count": 0,
                 "probability": 1,
                 "unique": 4,
                 "has_duplicates": false
               }
             ],
             "lengths": [
               4
             ],
             "total_count": 4,
             "probability": 0.3333333333333333,
             "average_length": 4
           }
         ],
         "total_count": 3,
         "type": [
           "Undefined",
           "Array"
         ],
         "has_duplicates": true,
         "probability": 0.3333333333333333
       },
       {
         "name": "origin",
         "path": "origin",
         "count": 1,
         "types": [
           {
             "name": "Undefined",
             "type": "Undefined",
             "path": "origin",
             "count": 2,
             "total_count": 0,
             "probability": 0.6666666666666666,
             "unique": 1,
             "has_duplicates": true
           },
           {
             "name": "String",
             "bsonType": "String",
             "path": "origin",
             "count": 1,
             "values": [
               "England"
             ],
             "total_count": 0,
             "probability": 0.3333333333333333,
             "unique": 1,
             "has_duplicates": false
           }
         ],
         "total_count": 3,
         "type": [
           "Undefined",
           "String"
         ],
         "has_duplicates": true,
         "probability": 0.3333333333333333
       },
       {
         "name": "sport",
         "path": "sport",
         "count": 3,
         "types": [
           {
             "name": "String",
             "bsonType": "String",
             "path": "sport",
             "count": 3,
             "values": [
               "Baseball",
               "Football",
               "Cricket"
             ],
             "total_count": 0,
             "probability": 1,
             "unique": 3,
             "has_duplicates": false
           }
         ],
         "total_count": 3,
         "type": "String",
         "has_duplicates": false,
         "probability": 1
       },
       {
         "name": "variants",
         "path": "variants",
         "count": 1,
         "types": [
           {
             "name": "Undefined",
             "type": "Undefined",
             "path": "variants",
             "count": 2,
             "total_count": 0,
             "probability": 0.6666666666666666,
             "unique": 1,
             "has_duplicates": true
           },
           {
             "name": "Document",
             "bsonType": "Document",
             "path": "variants",
             "count": 1,
             "fields": [
               {
                 "name": "eu",
                 "path": "variants.eu",
                 "count": 1,
                 "types": [
                   {
                     "name": "String",
                     "bsonType": "String",
                     "path": "variants.eu",
                     "count": 1,
                     "values": [
                       "Football"
                     ],
                     "total_count": 0,
                     "probability": 1,
                     "unique": 1,
                     "has_duplicates": false
                   }
                 ],
                 "total_count": 1,
                 "type": "String",
                 "has_duplicates": false,
                 "probability": 1
               },
               {
                 "name": "us",
                 "path": "variants.us",
                 "count": 1,
                 "types": [
                   {
                     "name": "String",
                     "bsonType": "String",
                     "path": "variants.us",
                     "count": 1,
                     "values": [
                       "Soccer"
                     ],
                     "total_count": 0,
                     "probability": 1,
                     "unique": 1,
                     "has_duplicates": false
                   }
                 ],
                 "total_count": 1,
                 "type": "String",
                 "has_duplicates": false,
                 "probability": 1
               }
             ],
             "total_count": 0,
             "probability": 0.3333333333333333
           }
         ],
         "total_count": 3,
         "type": [
           "Undefined",
           "Document"
         ],
         "has_duplicates": true,
         "probability": 0.3333333333333333
       }
     ],
     "count": 3
   }
      