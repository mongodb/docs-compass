.. _compass-agg-builder:

============================
Aggregation Pipeline Builder
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

*New in version 1.14.0*

The Aggregation Pipeline Builder in |compass| lets you create
:manual:`aggregation pipelines </core/aggregation-pipeline/>` to process
documents from a collection or view and return computed results. For
example, you can use aggregation pipelines to:

- Group values from multiple documents together.

- Perform operations on the grouped data to return a single result.

- Analyze data changes over time.

To build an aggregation pipeline, choose a collection and click the
:guilabel:`Aggregations` tab. |compass-short| displays a blank
aggregation pipeline. The :guilabel:`Preview of Documents in the
Collection` section shows 20 documents randomly sampled from the chosen
collection.

Tasks
-----

You can use the |compass-short| Aggregation Pipeline Builder to:

- :ref:`Create a new aggregation pipeline <create-agg-pipeline>`

- :ref:`Save a pipeline <save-agg-pipeline>`

- :ref:`Open a saved pipeline <open-saved-pipeline>`

- :ref:`Set the documents limit or auto preview documents <use-sample-mode-or-auto-preview>`

- :ref:`View or change pipeline settings <change-pipeline-settings>`

- :ref:`View the explain plan for pipelines <explain-plan-pipeline>` 

- :ref:`Export Aggregation Results <export-agg-builder-results>`

- :ref:`Specify custom collation <pipeline-custom-collation>`

- :ref:`Create a view from pipeline results <create-a-view>`

- :ref:`Import a pipeline from plain text <compass-import-pipeline>`

- :ref:`Export a pipeline to Java, Node, C#, and Python 3 <compass-export-pipeline>`

Limitations
-----------

- The :pipeline:`$out` stage is not available if you are connected to a
  :atlas:`Data Lake </data-lake>`.

- You cannot run the :atlas:`Atlas Search </atlas-search>` ``$search``
  or ``$searchMeta`` stages on a :ref:`time series collection
  <manual-timeseries-landing>`.

.. _create-agg-pipeline:

Create an Aggregation Pipeline
------------------------------

.. include:: /includes/steps/create-agg-pipeline.rst

.. _save-agg-pipeline:

Save a Pipeline
---------------

.. include:: /includes/fact-save-pipeline.rst

.. _open-saved-pipeline:

Open a Saved Pipeline
---------------------

1. Click the :guilabel:`Folder` icon at the top left of the
   pipeline builder. 

   .. figure:: /images/compass/saved-pipeline-icon.png
         :figwidth: 316px
         :alt: Saved Pipeline Icon

#. Hover over the pipeline you want to open and click :guilabel:`Open`.

   .. figure:: /images/compass/saved-pipelines.png
         :figwidth: 316px
         :alt: Saved Pipelines List 

#. In the modal, click :guilabel:`Open Pipeline`.

.. note::

   Starting in |compass| 1.31, you can view your saved queries
   and aggregation pipelines on the :guilabel:`My Queries` view 
   once connected to your cluster.

   To learn more, see 
   :ref:`viewing saved aggregations<saved-query-view>` for details.

.. _use-sample-mode-or-auto-preview:

Set the Documents Limit or Auto Preview Documents
-------------------------------------------------

Use the toggles at the top of the pipeline builder to set the
limit on the number of sampled documents or to enable auto preview.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Option
     - Description
   * - .. data:: Sample Mode
     - (*Recommended*) When enabled, limits input documents passed to
       :pipeline:`$group`, :pipeline:`$bucket`, and
       :pipeline:`$bucketAuto` stages. Set the document limit with the
       :data:`Limit` setting.

   * - .. data:: Auto Preview
     - When enabled, |compass-short| automatically updates the
       preview documents pane to reflect the results of each active
       stage as the pipeline progresses.

.. _change-pipeline-settings:

View or Change Pipeline Settings
--------------------------------

To view and change pipeline settings:

1. Click the gear icon at the upper right of the pipeline builder to
   open the :guilabel:`Settings` panel.

#. Change any of the following pipeline settings.

   .. list-table::
      :header-rows: 1
      :widths: 30 70 30

      * - Option
        - Description
        - Default
      * - .. data:: Comment Mode
        - When enabled, adds helper comments to each stage.
        - Enabled
      * - .. data:: Number of Preview Documents
        - Number of documents to show in the preview.
        - 20
      * - .. data:: Limit
        - When :guilabel:`Sample Mode` is enabled, specifies the number of
          documents passed to :pipeline:`$group`, :pipeline:`$bucket`, and
          :pipeline:`$bucketAuto` stages. Lower limits improve pipeline
          running time, but may miss documents.
        - 100000

#. Click :guilabel:`Apply` to save changes and close the
   :guilabel:`Settings` panel.

.. _explain-plan-pipeline:

Explain Plan for Pipelines
--------------------------

Use the :guilabel:`Explain` button to view the explain plan that helps you 
understand the performance of your pipelines. You can view the explain plan 
at any point while creating or editing your pipeline. 

To view your pipeline explain plan, click :guilabel:`Explain` in the 
right corner of your pipeline toolbar.

.. figure:: /images/compass/agg-explain-plan.png
    :alt: Aggregation Pipeline Builder Explain Plan

Your results are presented in this format: 

.. figure:: /images/compass/agg-explain-results.png
    :figwidth: 450px
    :alt: Aggregation Pipeline Builder Explain Results

.. _pipeline-custom-collation:

Specify Custom Collation
------------------------

Use :manual:`custom collation </reference/collation/>` to specify
language-specific rules for string comparison, such as rules for
letter case and accent marks.

To specify a custom collation:

#. Click :guilabel:`More Options` in the top right corner of the pipeline 
   builder. 

   .. figure:: /images/compass/options-collation.png
        :alt: Collation Option

#. Enter your collation document.

.. _export-agg-builder-results:

Export Aggregation Results
--------------------------

To export results from your aggregation pipeline:

#. Connect to the deployment containing the
   :doc:`collection </collections>` you wish to export data from.

   To learn how to connect to a deployment, see
   :ref:`connect-run-compass`.

#. Navigate to your target collection.

   You can either select the collection from the
   :doc:`Collections </collections>` tab or click the collection 
   in the left-hand pane. 

#. Create an aggregation pipeline and run for results.

   To learn how to create an aggregation pipeline, see :ref:`Create an 
   Aggregation Pipeline <create-agg-pipeline>`. 

#. Click :guilabel:`Export`.

#. Choose the appropriate file type.

   Under :guilabel:`Select Export File Type`, select either 
   :guilabel:`JSON` or :guilabel:`CSV`. If you select :guilabel:`JSON`,
   your data is exported to the target file as an array of JSON objects.

#. Under :guilabel:`Output`, choose where to export the file to.

   .. figure:: /images/compass/aggregation-export.png
      :alt: Export Aggregation Data
      :width: 70%

#. Click :guilabel:`Export`. 


.. _create-a-view:

Create a View from Pipeline Results
-----------------------------------
   
.. note::

   Creating a view from pipeline results does not save the pipeline
   itself.

To create a view from your pipeline results:

.. include:: /includes/fact-create-view-from-pipeline.rst

Example
-------

In this example, you create and run a pipeline
for a collection with airline data. You can download this
dataset from the following link:
`air_airlines.json <https://raw.githubusercontent.com/mongodb/docs-assets/compass/air_airlines.json>`__.

For instructions on importing JSON data into your cluster, see :ref:`Import Data 
into a Collection <import-data>`. This example assumes you have the data in the
``example.air_airlines`` namespace.

Procedure
~~~~~~~~~

1. Connect to a database deployment. For information on how to connect to a 
   database deployment, see :atlas:`Connect via Compass </compass-connection/>`.

#. Select the ``example`` database where the ``air_airlines`` collection 
   exists. 

#. Create the Pipeline

   |

   The following pipeline has two aggregation stages:
   :pipeline:`$group` and :pipeline:`$match`.

   - The ``$group`` stage groups documents by their
     ``active`` status and ``country``. The stage also adds
     a new ``flightCount`` field containing the number
     of documents in each group.

   - The ``$match`` stage filters documents to return documents
     with a ``flightCount`` value greater than or equal to ``5``.

     .. figure:: /images/compass/agg-builder-full-example.png
        :alt: Aggregation Builder Full Example

#. Run the Pipeline.

   Click :guilabel:`Run` at the top right of the pipeline builder.

The pipeline returns documents, as shown in the following abbreviated example:

.. figure:: /images/compass/airline-example-results.png
   :alt: Airline Pipeline Results

.. toctree::
   :titlesonly:
   
   /import-pipeline-from-text
   /export-pipeline-to-language
