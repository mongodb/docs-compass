.. _compass-agg-builder:

============================
Aggregation Pipeline Builder
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

*New in version 1.14.0*

The Aggregation Pipeline Builder in |compass| provides the ability to
create :manual:`aggregation pipelines </core/aggregation-pipeline/>` to
process data. With aggregation pipelines, documents in a collection
or view pass through multiple stages where they are processed into a
set of aggregated results. The particular stages and results can be
modified depending on your application's needs.

To access the aggregation pipeline builder, navigate to the
:doc:`collection or view </collections>` for which you wish to create an
aggregation pipeline and click the :guilabel:`Aggregations` tab. You
are presented with a blank aggregation pipeline. The
:guilabel:`Preview of Documents in the Collection` section of the
:guilabel:`Aggregations` view displays 20 documents sampled from the
current collection.

To populate the Aggregation Pipeline Builder, you can either:

- :ref:`Create a new Aggregation Pipeline in the UI <create-agg-pipeline>`,

- :ref:`Open a saved pipeline <open-saved-pipeline>`, or

- :ref:`Import a Pipeline from Plain Text <compass-import-pipeline>`

.. _create-agg-pipeline:

Create an Aggregation Pipeline
------------------------------

.. include:: /includes/steps/create-agg-pipeline.rst

.. _pipeline-custom-collation:

Specify Custom Collation
~~~~~~~~~~~~~~~~~~~~~~~~

Use :manual:`custom collation </reference/collation/>` to specify
language-specific rules for string comparison, such as rules for
letter case and accent marks.

To specify a custom collation:

1. Click the :guilabel:`Collation` button at the top of the pipeline
   builder.

#. Enter your collation document.

Limitations
~~~~~~~~~~~

The :pipeline:`$out` stage is not available if you are connected to a
`Data Lake <https://www.mongodb.com/atlas/data-lake>`__. 

.. _save-agg-pipeline:

Save a Pipeline
---------------

You can save a pipeline so that you can access it later. If you
load a saved pipeline, you can modify it without
changing the original saved copy. You can also create a :ref:`view
<view-details>` from your pipeline results.

To save your pipeline:

1. Click the :guilabel:`Save` button at the top of the pipeline
   builder.

#. Enter a name for your pipeline.

#. Click :guilabel:`Save`.

.. _create-a-view:

Create a View from Pipeline Results 
-----------------------------------

.. note::

   Creating a view from pipeline results does not save the pipeline
   itself.

To create a view from your pipeline results:

.. include:: /includes/fact-create-view-from-pipeline.rst

.. _open-saved-pipeline:

Open a Saved Pipeline
---------------------

1. Click the :guilabel:`Folder` icon at the top left of the
   pipeline builder.

#. Hover over the pipeline you want to open and click :guilabel:`Open`.

#. In the modal, click :guilabel:`Open Pipeline`.

Pipeline Options
----------------

The toggles at the top of the pipeline builder control the
following options:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Option
     - Description
   * - .. data:: Sample Mode
     - (*Recommended*) When enabled, limits input documents passed to
       :pipeline:`$group`, :pipeline:`$bucket`, and
       :pipeline:`$bucketAuto` stages. Set the document limit with the
       :data:`Limit` setting.

   * - .. data:: Auto Preview
     - When enabled, |compass-short| automatically updates the
       preview documents pane to reflect the results of each active
       stage as the pipeline progresses.

Pipeline Settings
~~~~~~~~~~~~~~~~~

To view and modify pipeline settings:

1. Click the gear icon at the top right of the pipeline builder to
   open the :guilabel:`Settings` panel.

#. Modify the pipeline settings. The following settings can be modified:

   .. list-table::
      :header-rows: 1
      :widths: 30 70 30

      * - Option
        - Description
        - Default
      * - .. data:: Comment Mode
        - When enabled, adds helper comments to each stage.
        - Enabled
      * - .. data:: Number of Preview Documents
        - Number of documents to show in the preview.
        - 20
      * - .. data:: Max Time
        - Cumulative time limit in milliseconds for processing
          the pipeline. Use this option to prevent long hang times.
        - 5000
      * - .. data:: Limit
        - When :guilabel:`Sample Mode` is enabled, number of documents
          passed to :pipeline:`$group`, :pipeline:`$bucket`, and
          :pipeline:`$bucketAuto` stages. Lower limits improve pipeline
          execution time, but may miss documents.
        - 100000

#. Click :guilabel:`Apply` to save changes and close the
   :guilabel:`Settings` panel.

Example
-------

The following example walks through creating and executing a pipeline
for a collection containing airline data. You can download this
dataset from the following link:
`air_airlines.json <https://raw.githubusercontent.com/mongodb/docs-assets/compass/air_airlines.json>`__.

For instructions on importing JSON data into your cluster, see
:manual:`mongoimport </reference/program/mongoimport/>`. This
procedure assumes you have the data in the
``example.air_airlines`` namespace.


Create the Pipeline
~~~~~~~~~~~~~~~~~~~

The following pipeline has two aggregation stages:
:pipeline:`$group` and :pipeline:`$match`.

- The ``$group`` stage groups documents by their
  ``active`` status and ``country``. The stage also adds
  a new field called ``flightCount`` containing the number
  of documents in each group.

- The ``$match`` stage filters documents to only return
  those with a ``flightCount`` value greater than or
  equal to ``5``.

.. figure:: /images/compass/agg-builder-full-example.png
   :alt: Aggregation Builder Full Example

Copy the Pipeline to the Clipboard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Click the :guilabel:`Export to Language` button at the top
   of the pipeline builder. The button opens the following modal:

   .. figure:: /images/compass/agg-builder-example-export-to-node.png
      :alt: Aggregation Builder Full Example

#. Click the :guilabel:`Copy` button in the :guilabel:`My Pipeline`
   panel on the left. This button copies your pipeline to your
   clipboard in :binary:`~mongo` shell syntax. You will use the
   pipeline in the following section.

Execute the Pipeline
~~~~~~~~~~~~~~~~~~~~

1. Launch and connect to a
   :manual:`mongod </reference/program/mongod/>` instance which contains the imported ``air_airlines.json`` dataset.
   
#. Switch to the ``example`` database where the ``air_airlines``
   collection exists:

   .. code-block:: javascript

      use example

#. Run the following command to execute the pipeline created in
   |compass-short|:

   .. code-block:: javascript

      db.air_airlines.aggregate([{
        $group: {
          _id: {
            active: '$active',
            country: '$country'
          },
          flightCount: {
            $sum: 1
          }
        }
      }, {
        $match: {
          flightCount: {
            $gte: 5
          }
        }
      }])

The following is an excerpt of the documents returned by
the pipeline:

.. code-block:: javascript

   { "_id" : { "active" : "Y", "country" : "Nigeria" }, "flightCount" : 5 }
   { "_id" : { "active" : "N", "country" : "Switzerland" }, "flightCount" : 46 }
   { "_id" : { "active" : "N", "country" : "Bahrain" }, "flightCount" : 8 }
   { "_id" : { "active" : "N", "country" : "Guinea-Bissau" }, "flightCount" : 8 }
   { "_id" : { "active" : "N", "country" : "Argentina" }, "flightCount" : 14 }
   { "_id" : { "active" : "N", "country" : "Moldova" }, "flightCount" : 17 }
   { "_id" : { "active" : "Y", "country" : "Israel" }, "flightCount" : 6 }
   { "_id" : { "active" : "N", "country" : "Finland" }, "flightCount" : 7 }

.. class:: hidden

   .. toctree::
      :titlesonly:

      /import-pipeline-from-text
      /export-pipeline-to-language
