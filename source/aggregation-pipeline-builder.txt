.. _compass-agg-builder:

============================
Aggregation Pipeline Builder
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

*New in version 1.14.0*

The Aggregation Pipeline Builder in |compass| provides the ability to
create :manual:`aggregation pipelines </core/aggregation-pipeline/>` to
process data. With aggregation pipelines, documents in a collection
pass through multiple stages where they are processed into a set of
aggregated results. The particular stages and results can be modified
depending on your application's needs.

To access the aggregation pipeline builder, navigate to the
:doc:`collection </collections>` for which you wish to create an
aggregation pipeline and click the :guilabel:`Aggregations` tab. You
are presented with a blank aggregation pipeline. The
:guilabel:`Preview of Documents in the Collection` section of the
:guilabel:`Aggregations` view displays 20 documents sampled from the
current collection.

To populate the Aggregation Pipeline Builder, you can either:

- :ref:`Create a new Aggregation Pipeline in the UI <create-agg-pipeline>`,

- :ref:`Open a saved pipeline <open-saved-pipeline>`, or

- :ref:`Import a Pipeline from Plain Text <compass-import-pipeline>`

.. _create-agg-pipeline:

Create an Aggregation Pipeline
------------------------------

.. include:: /includes/steps/create-agg-pipeline.rst

.. _save-agg-pipeline:

Save a Pipeline
---------------

To save a pipeline:

1. Name your pipeline using the
   :guilabel:`Enter a pipeline name` input at the top of the
   :guilabel:`Aggregations` view.

2. Click :guilabel:`Save Pipeline`.

.. _open-saved-pipeline:

Open a Saved Pipeline
---------------------

.. important::

   Opening a saved pipeline abandons any unsaved changes to the
   pipeline you are currently working on. If the circle at the
   top-right of the :guilabel:`Aggregations` view is orange, this
   means you have unsaved changes to your pipeline.

To open a previously saved pipeline:

1. Click the :guilabel:`Folder` icon to the left of the pipeline name
   input.

2. Hover over the pipeline you want to open and click :guilabel:`Open`.

3. In the ensuing dialog, click :guilabel:`Open Pipeline`.

Additional Pipeline Options
---------------------------

Click the :guilabel:`...` button to the right of the
:guilabel:`Save Pipeline` button to access additional pipeline
options:

.. figure:: /images/compass/agg-builder-export-dropdown.png
   :alt: Aggregation Builder additional pipeline options

The following additional options are available:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Option
     - Description
   * - Export to Language
     - Format and export the current pipeline in the selected language.
       The languages currently supported are Java, Node, C#, and
       Python 3. For more information, see
       :ref:`Export Pipeline to Specific Langague
       <compass-export-pipeline>`.
   * - Clone Pipeline
     - Creates a new version of the current pipeline by appending
       ``(copy)`` to the current pipeline name, retaining the current
       pipeline state. This allows you to modify and save a new version
       of the pipeline.
   * - New Pipeline
     - Resets the pipeline to its initial state.

       .. important::

          The :guilabel:`New Pipeline` option does not save your
          current pipeline state. If you wish to
          :ref:`save your current pipeline <save-agg-pipeline>`, you
          must do so before selecting this option.

          If the circle at the top-right of the :guilabel:`Aggregations` view
          is orange, this means you have unsaved changes to your pipeline.

The following toggles provide additional pipeline options:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Option
     - Description
   * - Comment Mode
     - When enabled, adds helper comments to each stage.
   * - Sample Mode
     - (*Recommended*) When enabled, limits input documents to ``100000``
       before :manual:`$group
       </reference/operator/aggregation/group/>`, :manual:`$bucket
       </reference/operator/aggregation/bucket/>`, and
       :manual:`$bucketAuto
       </reference/operator/aggregation/bucketAuto/>` stages.
   * - Auto Preview
     - When enabled, |compass-short| automatically updates the
       preview documents pane to reflect the results of each active
       stage as the pipeline progresses.

Example
-------

The following example walks through creating and executing a pipeline
for a collection containing airline flight statistics.

Create the Pipeline
~~~~~~~~~~~~~~~~~~~

The following pipeline has two aggregation stages:
:manual:`$match </reference/operator/aggregation/match/>` and
:manual:`$group </reference/operator/aggregation/group/>`. The
``$match`` stage returns documents with ``carrierFsCode`` equal to
``1I``, and the ``$group`` stage groups the documents returned from
the previous stage by the ``departureAirportFsCode`` property:

.. figure:: /images/compass/agg-builder-full-example.png
   :alt: Aggregation Builder Full Example

Copy the Pipeline to the Clipboard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using the :ref:`Export to Language <compass-export-pipeline>` feature,
select :guilabel:`Node` and copy the pipeline into the clipboard:

.. figure:: /images/compass/agg-builder-example-export-to-node.png
   :alt: Aggregation Builder Full Example

The aggregation pipeline syntax for Node applications is compatible
with the :manual:`Mongo shell <mongo>`. The next step uses the Mongo
shell to execute the pipeline, though you could also use a Node
application with the `MongoDB NodeJS Driver
<http://mongodb.github.io/node-mongodb-native/>`_ to achieve a similar
result.

Execute the Pipeline
~~~~~~~~~~~~~~~~~~~~

Launch and connect to a :manual:`mongod
</reference/program/mongod/>` instance. Next, switch to the ``test``
database where the ``flightStats`` collection exists:

.. code-block:: javascript

   use test

The following command executes the pipeline created in |compass|:

.. code-block:: javascript

   db.flightStats.aggregate([
   {
     $match: {
       carrierFsCode: "1I"
     }
   },
   {
     $group: {
       _id: "$departureAirportFsCode",
       flights: { $push: "$flightId" }
     }
   }
   ])

The pipeline returns the following document:

.. code-block:: javascript

   { "_id" : "EWR", "flights" : [ 543184347, 544589251, 544589200, 543183182, 545515483, 544595864 ] }

.. class:: hidden

   .. toctree::
      :titlesonly:

      /import-pipeline-from-text
      /export-pipeline-to-language

