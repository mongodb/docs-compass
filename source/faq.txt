.. _compass-faq:

===
FAQ
===

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

What is the performance impact of running this tool?
----------------------------------------------------

Testing has shown that |compass| has minimal impact in prototype
deployments, though additional performance testing and monitoring is in
progress.

For best results, use MongoDB 3.2 or higher, which includes the
:manual:`$sample </reference/operator/aggregation/sample/>` operator for
efficient sampling on a collection. On older versions of MongoDB,
|compass| falls back on a
:ref:`less efficient sampling method <compass_fallback_sampling>`.

You should only execute queries that are indexed appropriately in the
database to avoid scanning the entire collection.

.. _compass-faq-confidential-data:

How does Compass handle confidential data?
------------------------------------------

|compass| stores and retrieves sensitive data such as passwords
using a credentials API specific to the operating system running
|compass-short|. The credentials API securely handles sensitive
information by encrypting and protecting access to your data.

|compass| stores the following data using the credentials API:

- MongoDB server passwords,

- SSH passwords for tunneling,

- :abbr:`TLS (Transport Layer Security)`/:abbr:`SSL (Secure Sockets Layer)` passphrases

|compass| utilizes a node.js native add-on, `Keytar
<https://github.com/atom/node-keytar>`_, to communicate with and store
data in the operating system's credentials API. For more information on
how Keytar operates and the specific APIs it accesses, refer to the
`Keytar Github documentation <https://github.com/atom/node-keytar>`_.

.. _compass-faq-sampling:

What is sampling and why is it used?
------------------------------------

Sampling in |compass| is the selection a subset of data
from a particular collection and analyzing the documents within the
sample set.

Sampling is a common technique in statistical analysis because analyzing
a subset of the data gives similar results to analyzing all of it. In
addition, sampling allows results to be generated quickly rather than
performing a computationally-expensive collection scan.

How does sampling work?
-----------------------

|compass| employs two distinct sampling mechanisms.

In MongoDB 3.2, collections are sampled with the
:manual:`$sample </reference/operator/aggregation/sample/>` operator via
the :manual:`aggregation pipeline </core/aggregation-pipeline>`. This
provides efficient random sampling without replacement over the entire
collection, or over the subset of documents specified by a query.

.. _compass_fallback_sampling:

In MongoDB 3.0, collections are sampled via a
backwards-compatible algorithm executed entirely within |compass|. It
takes place in three stages:

1. |compass| opens a :term:`cursor` on the desired collection, limited
   to at most 10,000 documents sorted in descending order of the ``_id``
   field.
2. ``sampleSize`` documents are randomly selected from the stream. To
   do this efficiently, |compass| employs `reservoir sampling
   <http://en.wikipedia.org/wiki/Reservoir_sampling>`_.
3. |compass| performs a query to select the chosen documents directly
   via ``_id``.

``sampleSize`` is set to 1000 documents.

.. note::
  The choice of sampling method is done transparently in the
  background, with no changes required by the user.

Won't sampling miss documents?
------------------------------

Sampling is chosen for its efficiency: the amount of time required to
perform a sample is minimal, on the order of a few seconds. Increasing
the sample confidence will demand more processing power and time.
Furthermore, sophisticated outlier detection requires an inspection of
every document in a MongoDB deployment, which would be unfeasible for
large data sets. The MongoDB team is in the process of conducting user
tests on large data sets to find a reasonable balance.

What happens to long running queries?
-------------------------------------

As a precaution, Compass aborts long running queries to prevent
excessive querying on your database.

Slow Sampling
~~~~~~~~~~~~~

All queries that Compass sends to your MongoDB instance have a timeout
flag set which automatically aborts a request if it takes longer than
the specified timeout. This timeout is currently set to 10 seconds. If
sampling on the database takes longer, Compass will notify you about
the timeout and give you the options of (a) retrying with a longer
timeout (60 seconds) or (b) running a different query.

.. note::

   Sampling time may be affected by a number of factors, like load on
   the server, number of documents and existence of a suitable index
   for your query.

It is recommended that you only increase the sampling timeout if you
are not connected to a production instance, as this may negatively
affect the performance and response time of your database.

Slow Schema Analysis
~~~~~~~~~~~~~~~~~~~~

If the database returns documents faster than the specified timeout (10
or 60 seconds), but the schema analysis of the documents takes longer
than expected (due to complex, large documents), Compass gives you the
option to abort the analysis step and show the partial results.

Why are some features of |compass| not working?
-----------------------------------------------

If you can connect to your MongoDB instance using |compass| but
some features do not work as expected, your system firewall may be
blocking network requests required by |compass|. |compass| features
which require incoming connections from external sources include:

- Third party mapping services such as Mapbox

- Intercom

- Bugsnag for error reporting

To fix this issue, configure your system firewall to allow incoming
connections for |compass|. Ensure ports ``80`` and ``443`` are open
between |compass| and the host for the MongoDB Instance to which
Compass connects.

.. include:: /includes/fact-isolated-edition-firewall.rst

.. _faq-privacy-settings:

How do I view and modify my Privacy Settings?
---------------------------------------------

To view and modify your |compass| privacy settings, from the top-level
menu click :guilabel:`Help`, then :guilabel:`Privacy Settings`.

The privacy settings dialog allows you to toggle various
|compass| settings such as enabling crash reports and automatic updates.
See the following screenshot for all available privacy settings options:

.. figure:: /images/compass/privacy-settings.png
   :scale: 80 %

.. note::

   Crash reports and automatic updates are not available in
   :ref:`Compass Isolated Edition <compass-isolated>`.

How do I enable geographic visualizations?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can enable geographic visualizations in |compass| in your
privacy settings. When :guilabel:`Enable Geographic Visualizations` is
selected, |compass| is allowed to make requests to a third-party
mapping service.

.. include:: /includes/fact-isolated-ver-third-party-mapping.rst

